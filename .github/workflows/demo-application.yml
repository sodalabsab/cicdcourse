# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run with a 'test' tag, accepting no traffic
# 6. Run tests and verify the version
# 7. Deploy 'production' version accepting all traffic
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build, Test and Deploy Demo application

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
    paths: 
      - 'cloud-run-pipeline-demo/**'
  

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }} 
  GAR_LOCATION: europe-north1
  SERVICE: demo-hadishad
  REGION: europe-north1
  REPOSITORY: demo

jobs:
  build-and-unittest:
    runs-on: self-hosted
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
      - name: Grant Execute Permission (Windows)
        if: runner.os == 'Windows'
        working-directory: ./cloud-run-pipeline-demo
        run: icacls gradlew /grant Everyone:RX

  docker-build-and-push:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    needs: build-and-unittest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
      - name: Run build with Gradle Wrapper (Linux)
        working-directory: ./cloud-run-pipeline-demo
        run: chmod +x gradlew && ./gradlew test build
        shell: bash

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          token_format: 'access_token'
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
      - name: Build and Push Container
        working-directory: ./cloud-run-pipeline-demo
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
  
  deploy-test:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    outputs:
      url: ${{ steps.deploy-test.outputs.url }}
    steps:
      - name: Checkout #Needed to set up the workspace to store the credentials file
        uses: actions/checkout@v4
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Deploy to Cloud Run (test)
        id: deploy-test
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |
            GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
            DOCKER_IMAGE_TAG=${{ env.SERVICE }}:${{ github.sha }}
            HUB_ADDRESS=https://staging---ci-cd-course-hub-aeyvkm6j4q-lz.a.run.app/
          tag: 'staging'
          flags: '--max-instances=1 --allow-unauthenticated'

      - name: Show Output
        run: echo ${{ steps.deploy-test.outputs.url }}
  
  test-and-verify:
    runs-on: ubuntu-latest
    needs: deploy-test
    steps:
      - name: Test and verify
        id: test-and-verify
        uses: 'wei/curl@v1'
        with: 
          args: ${{ needs.deploy-test.outputs.url }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: test-and-verify
    steps:
      - name: Checkout #Needed to set up the workspace to store the credentials file
        uses: actions/checkout@v4
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Deploy to Cloud Run
        id: deploy-prod
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |
            GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
            DOCKER_IMAGE_TAG=${{ env.SERVICE }}:${{ github.sha }}
            HUB_ADDRESS=https://ci-cd-course-hub-aeyvkm6j4q-lz.a.run.app/
          tag: 'production'
          flags: '--max-instances=1 --allow-unauthenticated  --revision-suffix=${{ github.run_number }}'

      - name: Show Output
        run: echo ${{ steps.deploy-prod.outputs.url }}
